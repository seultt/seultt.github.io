{"meta":{"title":"seultt","subtitle":null,"description":null,"author":"seultt","url":"https://seultt.github.io"},"pages":[{"title":"Categories","date":"2017-11-07T07:53:20.838Z","updated":"2017-11-07T07:53:20.838Z","comments":true,"path":"categories/index.html","permalink":"https://seultt.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-11-07T07:53:13.434Z","updated":"2017-11-07T07:53:13.434Z","comments":true,"path":"tags/index.html","permalink":"https://seultt.github.io/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2017-11-07T07:53:24.783Z","updated":"2017-11-07T07:53:24.783Z","comments":true,"path":"about/index.html","permalink":"https://seultt.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"DataType","slug":"DataType","date":"2017-11-15T07:17:11.000Z","updated":"2017-11-15T07:17:21.461Z","comments":true,"path":"2017/11/15/DataType/","link":"","permalink":"https://seultt.github.io/2017/11/15/DataType/","excerpt":"","text":"JavaScript Data Type기본 데이터 타입 한번 생성된 기본 타입은 read Only 로서 수정은 불가능하다. (immutable) String Number undefined null Boolean Symbol 12var str = 'Hello';str = 'world'; 첫번째 구문이 실행되면 메모리에 ‘Hello’ 생성, 식별자 str은 메모리에 생성된 문자열 ‘Hello’의 메모리 주소를 가리킨다. 두번째 구문이 실행되면 이전에 생성된 문자열 ‘Hello’을 수정하는 것이 아닌 새로운 문자열 ‘world’를 메모리에 생성하고 식별자 str은 이것을 가리킨다. 이때 문자열 ‘Hello’와 ‘world’는 모두 메모리에 존재하고 있다. 1.String문자열은 배열처럼 인덱스를 통해 접근할 수 있다 이를 유사 배열이라 한다. 문자열은 기본 자료형으로 수정은 불가능하지만 새로운 할당은 가능하다. 이는 기존 문자열을 수정하는 것이 아닌 새로운 문자열을 할당하는 것이기 때문이다. 2. Number3. undefined값을 할당하지 않은 변수는 undefined 값을 가진다. 즉, 선언은 되었지만 할당된 적이 없는 변수에 접근하거나 존재하지 않는 객체 프로퍼티에 접근할 경우 반환된다. 4. nullnull 타입은 딱 한 가지 값, null을 가질 수 있다.의도적으로 기본형(Primitives) 또는 Object형 변수에 값이 없다는 것을 명시한 것이다. 이는 변수와 메모리 어드레스의 참조 정보를 제거하는 것을 의미한다. 5. Boolean논리적인 요소를 나타내며 true와 false 두가지 값을 갔는다. false : null, undefined, 숫자 0 6. SymbolSymbol은 ES6에서 새롭게 추가된 7번째 타입이다. Symbol은 애플리케이션 전체에서 유일하며 변경 불가능한(immutable) 기본 자료형(primitive) 이다. 주로 객체의 프로퍼티 키(property key)로 사용한다. Symbol 값은 애플리케이션 전체에서 유일하기 때문에 Symbol 값을 키로 갖는 프로퍼티는 다른 어떠한 프로퍼티와도 충돌하지 않는다. 참조 데이터 타입…조만간 출처 poiemaweb - JS DataType &amp; Variable","categories":[{"name":"Today I Learn","slug":"Today-I-Learn","permalink":"https://seultt.github.io/categories/Today-I-Learn/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://seultt.github.io/tags/JavaScript/"}]},{"title":"React-JSX","slug":"React-JSX","date":"2017-11-15T07:14:51.000Z","updated":"2017-11-15T07:15:29.365Z","comments":true,"path":"2017/11/15/React-JSX/","link":"","permalink":"https://seultt.github.io/2017/11/15/React-JSX/","excerpt":"","text":"React JSXReact.js는 일반 JavaScript문법이 아닌 JSX 문법을 사용하여 UI 템플릿화 한다.JSX를 사용하는 것은 필수가 아니지만 이를 사용하면 다음과 같은 장점이 있다. JSX는 컴파일링 되면서 최적화 되므로 빠르다. Type-safe 이며 컴파일링 과정에서 에러를 감지 할 수 있다. HTML에 익숙하다면, JSX를 사용하여 더 쉽고 빠르게 템플릿을 작성 할 수 있다. If-Else 문 사용 불가JSX 안에서 사용되는 JavaScript 표현에는ㄴ IF-Else 문이 사용이 안된다. 1234ternary(condition ? true : false)// example&lt;p&gt;&#123;1 == 1 ? 'True' : 'False'&#125;&lt;/p&gt; 위와 같이 사용해야함 Inline StyleReact의 Inline Style에서는, string 형식이 사용되지않고 key가 camelCase인 Object가 사용된다. 123456789101112131415render() &#123; let text = \"seultt\"; let pStyle = &#123; color: 'aqua', backgroundColor: 'black' &#125;; return ( &lt;div&gt; &lt;h1&gt; Hello World &lt;/h1&gt; &lt;h2&gt;Welcom to &#123;text&#125; &lt;/h2&gt; &lt;p style = &#123;pStyle&#125;&gt;&#123;1 == 1 ? 'True' : 'False' &#125;&lt;/p&gt; &lt;/div&gt; );&#125;","categories":[{"name":"Today I Learn","slug":"Today-I-Learn","permalink":"https://seultt.github.io/categories/Today-I-Learn/"}],"tags":[{"name":"React","slug":"React","permalink":"https://seultt.github.io/tags/React/"}]},{"title":"React / Angular","slug":"React-Angular","date":"2017-11-08T09:59:05.000Z","updated":"2017-11-09T12:22:54.163Z","comments":true,"path":"2017/11/08/React-Angular/","link":"","permalink":"https://seultt.github.io/2017/11/08/React-Angular/","excerpt":"","text":"React의 장점React는 Facebook 에서 성능 좋은 유저 인터페이스를 구현하는 목표로 만들어진 JavaScript 웹 프레임워크입니다. 브라우저 내에 DOM 변화가 일어 나면, 브라우저가 HTML / CSS 를 다시 연산, 레이아웃을 구성하고 웹페이지를 리랜더링하는 이 과정에서 시간이 많이 소요되는데 React는 Virtual DOM 을 사용하여 React 내에서 데이터가 변하면 브라우저상의 실제 DOM 에 적용 된다는 장점이 있습니다.","categories":[],"tags":[]},{"title":"yaho","slug":"yaho","date":"2017-11-06T08:11:54.000Z","updated":"2017-11-07T07:47:44.887Z","comments":true,"path":"2017/11/06/yaho/","link":"","permalink":"https://seultt.github.io/2017/11/06/yaho/","excerpt":"","text":"첫 글입니다!!","categories":[{"name":"아무거나","slug":"아무거나","permalink":"https://seultt.github.io/categories/아무거나/"}],"tags":[{"name":"undefined","slug":"undefined","permalink":"https://seultt.github.io/tags/undefined/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-11-06T07:24:36.518Z","updated":"2017-11-06T07:24:36.518Z","comments":true,"path":"2017/11/06/hello-world/","link":"","permalink":"https://seultt.github.io/2017/11/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}