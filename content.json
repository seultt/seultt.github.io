{"meta":{"title":"seultt","subtitle":null,"description":null,"author":"seultt","url":"https://seultt.github.io"},"pages":[{"title":"Categories","date":"2017-11-07T07:53:20.838Z","updated":"2017-11-07T07:53:20.838Z","comments":true,"path":"categories/index.html","permalink":"https://seultt.github.io/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2017-11-07T07:53:24.783Z","updated":"2017-11-07T07:53:24.783Z","comments":true,"path":"about/index.html","permalink":"https://seultt.github.io/about/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-11-07T07:53:13.434Z","updated":"2017-11-07T07:53:13.434Z","comments":true,"path":"tags/index.html","permalink":"https://seultt.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"TypeScript-Overview","slug":"TypeScript-Overview","date":"2017-11-21T14:03:48.000Z","updated":"2017-12-09T07:19:39.111Z","comments":true,"path":"2017/11/21/TypeScript-Overview/","link":"","permalink":"https://seultt.github.io/2017/11/21/TypeScript-Overview/","excerpt":"","text":"TypeScript = Language타입스크립트는? 프로그래밍 언어 Compiled Language 전통적인 Compiled Language와는 다른 점이 있기 때문에 Transpile 이라는 용어를 사용하기도 한다. 컴파일 하는 과정에 타입을 체크하면서 오류들을 사전에 방지할 수 있다. 자바스크립트 인터프리터 언어 개발 환경 구축 및 컴파일러 사용node.js 설치 https://nodejs.org v6.10.3LTS V7.10.0 Current node.js version manager nvm https://github.com/creationix/nvm https://github.com/coreybutler/nvm-windows n https://github.com/tj/n 타입스크립트 컴파일러 설치 npm /Visual Studio plugin npm npm i typescript -g 전역 node_modules/.bin/tsc tsc source.ts Visual Studio plugin 설치 Visual Studio 2017 / 2015 Update 3 에서는 디폴트로 설치되어 있음 아니면 설치 1234// 추가\"scripts\": &#123; \"transpile\": \"tsc\" // === \"transpile\":\"node_modules/.bin/tsc\"&#125; npm script에서는 scripts 안에 transpile이라는 명령어를 지정해 놓고 package.json을 기준으로 상대경로를 쓸 필요 없이node 모듈’s에 있는 .bin에 있는 명령어들은 바로 사용할 수 있도록 지정해 놓았다. tsc를 불러서 컴파일을 하겠다!! TypeScript Basic TypesTypeScript 에서 프로그램 작성을 위해 기본 제공하는 데이터 타입 JavaScript 기본 자료형 포함(Superset) ECMAScript 표준에 따른 기본 자료형은 6가지 Boolean Number String Null Undefined Symbol (ECMAScript 6 에 추가) Array: object 형 프로그래밍을 도울 몇가지 타입이 더 제공(함수를 리턴할때 주로 쓰임) Any Void Never Enum Tuple: object 형 Primitive Type = 원시값 오브젝트와 레퍼런스 형태가 아닌 실제 값을 저장하는 자료형 프리미티브 형의 내장 함수를 사용 가능한것은 자바스크립트 처리 방식 덕분 literal = 값 값자체가 변하지 않는 값을 의미한다. 상수와 다른 것은 상수는 가리키는 포인터가 고정이라는 것이고, 리터럴은 그 자체가 값이자 그릇이다. Boolean / boolean 소문자 boolean 은 프리미티브 boolean 대문자 Boolean 은 레퍼 오브젝트형식의 생성자오브젝트의 Boolean 권장은 프리미티브 타입을 권장한다. undefined &amp; null are subtypes of all other types. 모든 타입의 서브 타입이다. 다른 모든 타입에 대입, 할당이 가능하다! 하지만, 컴파일 옵션에서 ‘–strictNullCheecks’ 사용하면, null 과 undefined 는 void 나 자기 자신들에게만 할당할 수 있다. 이 경우, null 과 undefined 를 할당할 수 있게 하려면, union type 을 이용해야 한다. void 타입이 없는 상태 ‘any’ 와 반대의 이미 주로 함수의 리턴이 없을 때 사용, 그 외에는 사용할 일이 거의 없다. 12345function returnVoid(message): void &#123; console.log(message);&#125;returnVoid('리턴이 없다.'); any 어떤 타입이어도 상관이 없는 타입 이걸 최대한 쓰지 않는게 핵심, 이유는 컴파일 타입에 타입 체크가 정상적으로 이뤄지지 않기 때문 컴파일 옵션 중에는 any 를 쓰면 오류를 뱉도록 하는 옵션이 있음(nolmplicitAny) 12345function returnAny(message): any &#123; console.log(message);&#125;returnVoid&#123;'리턴은 아무거나'&#125; never 리턴에 주로 사용됨 아래 3가지 정도 123456789101112131415// Function returning never must have unreachable end pointfunction error(message: string): never &#123; throw new Error(message);&#125;// Inferred return type is neverfunction fail() &#123; return error(\"Something filed\");&#125;// Function returning never must have unreachable end pointfunction infiniteLoop(): never &#123; while (true) &#123; &#125;&#125; Array 원래 자바스크립트에서 array 는 객체이다. 사용방법 Array&lt;타입&gt; 타입[] 12let list: number[] = [1,2,3];let list: Array&lt;number&gt; = [1,2,3]; Tuple 배열인데 타입이 한가지가 아닌 경우 마찬가지로 객체 꺼내 사용할때 주의가 필요 배열을 Destructuring 하면 타입이 제대로 얻어진다. 12345678910111213141516// Declare a tuple typelet x: [strung, number];//Initialize itx = [\"hello\", 10]; // OK//Initialize itx = [10, \"hello\"]; // Errorx[3] = \"world\" // OK, 'string' can be assigned to 'string I number'console.log(x[5].toString()) // OK, 'string' and 'number both have 'toString'x[6] = true; // Error, 'boolean' isn't 'string I number'const person: [string, number] = ['mark', 35];const [name, age] = person; var, let, constvar ES5 변수의 유효 범위: 함수 스코프 호이스팅 (o); 재선언 가능 let, const ES6 변수의 유효 범위: 블록 스코프(친숙) 호이스팅 (x) 재선언 불가 var 말고 let, const* Type assertions type checking 에 쓰인다. 문법적으로는 두가지 방법이 있다. 변수 as 강제할 타입 &lt;강제할 타입&gt;변수 123let someValue: any = \"this is a string\";let strLength: number = (&lt;string&gt;someValue).length;let strLength: number = (someValue as string).length; 주로 넓은 타입에서 좁은 타입으로 강제하는 경우가 많다. jsx 에서는 as 를 쓴다. Type alias 타입, 별칭(별명) 인터페이스랑 비슷 Primitive, Union Type, Tuple 기타 직접 작성해야하는 타입을 다른 이름을 지정할 수 있다. 만들어진 타입의 refer 로 사용하는 것이지 타입을 만드는 것은 아니다 Aliasing Union1234567let person: string | number =0;person = 'Mark';type StringOrNumber = string | number;let another: StringOrNumber = 0;another = 'Anna'; 유니온 타입은 A 도 가능하고 B 도 가능한 타입 길게 쓰는걸 짧게 Aliasing Tuple12345let person: [string, number] = ['Mark', 35];type PersonTuple = [string, number];let another: PersonTuple = ['Anna', 24]; 튜플 타입에 별칭을 줘서 여러곳 에서 사용","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://seultt.github.io/categories/TypeScript/"}],"tags":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://seultt.github.io/tags/TypeScript/"}]},{"title":"DataType","slug":"DataType","date":"2017-11-15T07:17:11.000Z","updated":"2017-12-09T07:19:26.241Z","comments":true,"path":"2017/11/15/DataType/","link":"","permalink":"https://seultt.github.io/2017/11/15/DataType/","excerpt":"","text":"JavaScript Data Type기본 데이터 타입 한번 생성된 기본 타입은 read Only 로서 수정은 불가능하다. (immutable) String Number undefined null Boolean Symbol 12var str = 'Hello';str = 'world'; 첫번째 구문이 실행되면 메모리에 ‘Hello’ 생성, 식별자 str은 메모리에 생성된 문자열 ‘Hello’의 메모리 주소를 가리킨다. 두번째 구문이 실행되면 이전에 생성된 문자열 ‘Hello’을 수정하는 것이 아닌 새로운 문자열 ‘world’를 메모리에 생성하고 식별자 str은 이것을 가리킨다. 이때 문자열 ‘Hello’와 ‘world’는 모두 메모리에 존재하고 있다. 1.String문자열은 배열처럼 인덱스를 통해 접근할 수 있다 이를 유사 배열이라 한다. 문자열은 기본 자료형으로 수정은 불가능하지만 새로운 할당은 가능하다. 이는 기존 문자열을 수정하는 것이 아닌 새로운 문자열을 할당하는 것이기 때문이다. 2. Number3. undefined값을 할당하지 않은 변수는 undefined 값을 가진다. 즉, 선언은 되었지만 할당된 적이 없는 변수에 접근하거나 존재하지 않는 객체 프로퍼티에 접근할 경우 반환된다. 일반적으로 변수에 undefined 를 지정해서는 안됨.리터럴 값 undefined 는 빈 객체를 가리키는 포인터인 null과 초기화되지 않은 변수(undefined)를 비교할 목적으로 ECMA-262 3판에 추가되었다. 4. nullnull 타입은 딱 한 가지 값, null을 가질 수 있다.의도적으로 기본형(Primitives) 또는 Object형 변수에 값이 없다는 것을 명시한 것이다. 변수를 정의할 때 해당 변수가 객체를 가리키게 할 생각이라면 해당 변수에는 다른 값을 쓰지 말고 null로 초기화하길 권장한다. 그렇게 하면 다음과 같은 코드를 써서 해당 변수가 객체를 가리키는지 명시적으로 확인할 수 있다. 123if (car != null) &#123; // car를 사용하는 코드&#125; undefined 는 null에서 파생했으므로 ECMA-262 에서는 두 값이 다음과 같이 표면적으로는 동일한 것으로 정의한다. null 과 undefined 사이에 있는 == 연산자는 항상 true 를 반환한다. 하지만 두 값이 같다고 나오는 이유는 == 연산자가 피연산자를 비교할 때 암시적으로 타입 변환을 하기 때문이다. 하지만 위에서 언급했듯이 undefined 와 null 은 다르기 때문에 === 연산자는 false 를 반환하다. console.log (null == undefined); // true console.log (null === undefined); // false 5. Boolean논리적인 요소를 나타내며 true 와 false 두가지 값을 갔는다.true : true, 비어있지않은 문자열 모두, 0이 아닌 숫자. 무한대 포함, 모든 객체(빈객체{})false : false, null, undefined, 숫자 0 6. SymbolSymbol은 ES6에서 새롭게 추가된 7번째 타입이다. Symbol은 애플리케이션 전체에서 유일하며 변경 불가능한(immutable) 기본 자료형(primitive) 이다. 주로 객체의 프로퍼티 키(property key)로 사용한다. Symbol 값은 애플리케이션 전체에서 유일하기 때문에 Symbol 값을 키로 갖는 프로퍼티는 다른 어떠한 프로퍼티와도 충돌하지 않는다. 참조 데이터 타입…조만간 출처 poiemaweb - JS DataType &amp; Variable 프론트엔드 개발자를 위한 자바스크립트 프로그래밍 니콜라스 자카스 지음 | 한선용 옮김","categories":[{"name":"Today I Learn","slug":"Today-I-Learn","permalink":"https://seultt.github.io/categories/Today-I-Learn/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://seultt.github.io/tags/JavaScript/"}]},{"title":"React-JSX","slug":"React-JSX","date":"2017-11-15T07:14:51.000Z","updated":"2017-11-15T07:15:29.365Z","comments":true,"path":"2017/11/15/React-JSX/","link":"","permalink":"https://seultt.github.io/2017/11/15/React-JSX/","excerpt":"","text":"React JSXReact.js는 일반 JavaScript문법이 아닌 JSX 문법을 사용하여 UI 템플릿화 한다.JSX를 사용하는 것은 필수가 아니지만 이를 사용하면 다음과 같은 장점이 있다. JSX는 컴파일링 되면서 최적화 되므로 빠르다. Type-safe 이며 컴파일링 과정에서 에러를 감지 할 수 있다. HTML에 익숙하다면, JSX를 사용하여 더 쉽고 빠르게 템플릿을 작성 할 수 있다. If-Else 문 사용 불가JSX 안에서 사용되는 JavaScript 표현에는ㄴ IF-Else 문이 사용이 안된다. 1234ternary(condition ? true : false)// example&lt;p&gt;&#123;1 == 1 ? 'True' : 'False'&#125;&lt;/p&gt; 위와 같이 사용해야함 Inline StyleReact의 Inline Style에서는, string 형식이 사용되지않고 key가 camelCase인 Object가 사용된다. 123456789101112131415render() &#123; let text = \"seultt\"; let pStyle = &#123; color: 'aqua', backgroundColor: 'black' &#125;; return ( &lt;div&gt; &lt;h1&gt; Hello World &lt;/h1&gt; &lt;h2&gt;Welcom to &#123;text&#125; &lt;/h2&gt; &lt;p style = &#123;pStyle&#125;&gt;&#123;1 == 1 ? 'True' : 'False' &#125;&lt;/p&gt; &lt;/div&gt; );&#125;","categories":[{"name":"Today I Learn","slug":"Today-I-Learn","permalink":"https://seultt.github.io/categories/Today-I-Learn/"}],"tags":[{"name":"React","slug":"React","permalink":"https://seultt.github.io/tags/React/"}]},{"title":"React / Angular","slug":"React-Angular","date":"2017-11-08T09:59:05.000Z","updated":"2017-11-09T12:22:54.163Z","comments":true,"path":"2017/11/08/React-Angular/","link":"","permalink":"https://seultt.github.io/2017/11/08/React-Angular/","excerpt":"","text":"React의 장점React는 Facebook 에서 성능 좋은 유저 인터페이스를 구현하는 목표로 만들어진 JavaScript 웹 프레임워크입니다. 브라우저 내에 DOM 변화가 일어 나면, 브라우저가 HTML / CSS 를 다시 연산, 레이아웃을 구성하고 웹페이지를 리랜더링하는 이 과정에서 시간이 많이 소요되는데 React는 Virtual DOM 을 사용하여 React 내에서 데이터가 변하면 브라우저상의 실제 DOM 에 적용 된다는 장점이 있습니다.","categories":[],"tags":[]},{"title":"yaho","slug":"yaho","date":"2017-11-06T08:11:54.000Z","updated":"2017-11-07T07:47:44.887Z","comments":true,"path":"2017/11/06/yaho/","link":"","permalink":"https://seultt.github.io/2017/11/06/yaho/","excerpt":"","text":"첫 글입니다!!","categories":[{"name":"아무거나","slug":"아무거나","permalink":"https://seultt.github.io/categories/아무거나/"}],"tags":[{"name":"undefined","slug":"undefined","permalink":"https://seultt.github.io/tags/undefined/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-11-06T07:24:36.518Z","updated":"2017-11-06T07:24:36.518Z","comments":true,"path":"2017/11/06/hello-world/","link":"","permalink":"https://seultt.github.io/2017/11/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}